#!/bin/bash

# TODO: make service expose nothing to public (except for caddy)
# TODO: config update (upgrade)

#
# gitlab hooks
#

function start_gitlab() {
    cd "gitlab" ||
        panic "gitlab dir not found?"

    # check for soft link of config
    if [[ ! -L /etc/gitlab/gitlab.rb ]]; then
        # TODO: check link dst
        sudo systemctl stop gitlab-runsvdir ||
            panic "systemctl stop gitlab failed?"

        # link the config file to it
        sudo ln -sfv "$PWD/gitlab.rb" /etc/gitlab/gitlab.rb ||
            panic "link gitlab.rb failed?"
    fi

    # we're using the systemctl...
    sudo systemctl enable gitlab-runsvdir
    sudo systemctl start gitlab-runsvdir ||
        panic "systemctl start gitlab failed?"

    cd ..
}

function stop_gitlab() {
    sudo systemctl stop gitlab-runsvdir ||
        panic "systemctl stop gitlab failed?"
}

#
# miniflux hooks
#

function start_miniflux() {
    cd "miniflux" ||
        panic "miniflux dir not found?"

    # generating a password if not exists
    if [[ ! -f .env ]]; then
        cat > .env <<EOF
ADMIN_USERNAME=krnl
ADMIN_PASSWORD=$(head -c 4096 /dev/urandom | sha256sum -b | head -c 16)
EOF
        cat .env
    fi

    # up!
    docker-compose -p miniflux up -d ||
        panic "docker-compose up miniflux failed?"

    cd ..
}

function stop_miniflux() {
    cd "miniflux" ||
        panic "miniflux dir not found?"

    docker-compose -p miniflux down ||
        panic "docker-compose down miniflux failed?"

    cd ..
}

#
# sourcegraph hooks
#

function start_sourcegraph() {
    cd "sourcegraph" ||
        panic "sourcegraph dir not found?"

    docker-compose -p sourcegraph up -d ||
        panic "docker-compose up sorcegraph failed?"

    cd ..
}

function stop_sourcegraph() {
    cd "sourcegraph" ||
        panic "sourcegraph dir not found?"

    docker-compose -p sourcegraph down ||
        panic "docker-compose down sorcegraph failed?"

    cd ..
}

#
# caddy hooks
# TODO: docker? run as other user?
#

function start_caddy() {
    cd caddy ||
        panic "caddy dir not found?"

    # build caddy firstly (with dnspod plugin)
    xcaddy build --with github.com/caddy-dns/dnspod ||
        panic "xcaddy build failed?"
    
    # we should give caddy a permission to listen sockets
    if ! getcap caddy | grep -q "cap_net_bind_service=ep"; then
        # must sudo... FIXME?
        sudo setcap 'cap_net_bind_service=+ep' caddy ||
            panic "setcap for caddy failed?"
    fi
    
    # install user systemd file if not exists
    # TODO: always relink?
    if [[ ! -e ~/.config/systemd/user/caddy.service ]]; then
        mkdir -p ~/.config/systemd/user
        sed "s%\$CADDYBIN%$PWD/caddy%g" caddy.service > ~/.config/systemd/user/caddy.service
        sed -i "s%\$CADDYFILE%$PWD/Caddyfile%g" ~/.config/systemd/user/caddy.service

        # FIXME: no prompt? seems impossible...
        read -rp "dnspod_appid: " app_id
        read -rp "dnspod_token: " api_key
        local token="$app_id,$api_key"
        sed -i "s/\$DNSPOD_TOKEN/$token/g" ~/.config/systemd/user/caddy.service

        # reload daemon
        systemctl --user daemon-reload
    fi

    # enable & start!
    systemctl --user enable caddy
    systemctl --user start caddy

    cd ..
}

function stop_caddy() {
    # stop using systemctl...
    # TODO: revert settings?
    systemctl --user stop caddy ||
        panic "systemctl stop caddy failed?"
}

#
# frp hooks
# TODO
#

#
# Hooks
# TODO: merge...
#

function on_start() {
    local srvs="$*"
    for srv in $srvs; do
        local do_start="start_$srv"
        assert_is_function "$do_start"
        $do_start
    done
}

function on_stop() {
    local srvs="$*"
    for srv in $srvs; do
        local do_stop="stop_$srv"
        assert_is_function "$do_stop"
        $do_stop
    done
}
